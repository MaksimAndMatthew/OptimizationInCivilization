from random import *


def check_piles(number, task, arr, x, y):
    s = x*y
    if task == 1:
        result = 0
        for i in range(s):
            if arr[i][number] > result:
                result = arr[i][number]
                ans = i
    else:
        result = 1000
        for i in range(s):
            if arr[i][number] < result:
                result = arr[i][number]
                ans = i
    return ans, result


def super_func(arr, x, y):
    s = x * y
    flag_of_eat = 0
    max_place = 0
    max_place_sum = -1
    for a in range(s):
        if arr[a][1] >= 3:
            flag_of_eat = 1
            if arr[a][0] + arr[a][2] > max_place_sum:
                max_place_sum = arr[a][0] + arr[a][2]
                max_place = a
                flag_of_status = 0
    if flag_of_eat == 0:
        for a in range(s):
            if arr[a][0] + arr[a][2] > max_place_sum:
                max_place_sum = arr[a][0] + arr[a][2]
                max_place = a
                flag_of_status = 1
    return max_place, flag_of_status


def super_func2(arr, cord):
    good_status = -1
    place = 0
    for i in range(6, 11):
        if arr[cord][i] != "океан":
            if arr[i][0] + arr[i][2] > good_status:
                good_status = arr[i][0] + arr[i][2]
                place = i
    return place


def array_generation(x, y, s):
    size = x * y
    array = [[]]
    for i in range(size):
        array1 = []
        for j in range(s):
            if j == 1:
                array1.insert(j, randint(0, 5))
            elif j == 0 or j == 2:
                array1.insert(j, randint(1, 6))
            elif j > 4:
                if 0 < i + 1 < x + 1:
                    if i + 1 == 1:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, -1)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, -1)
                    if 1 < i + 1 < x:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, -1)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x)
                        array1.insert(j + 5, i + 1 + x - 1)
                        array1.insert(j + 6, i + 1 - 1)
                    if i + 1 == x:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, -1)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, -1)
                        array1.insert(j + 4, i + 1 + x)
                        array1.insert(j + 5, i + 1 + x - 1)
                        array1.insert(j + 6, i + 1 - 1)
                    if i + 1 == size:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, -1)
                        array1.insert(j + 4, -1)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, i + 1 - 1)
                elif (i + 1 - 1) % x == 0 and (i + 1 - 1) != 0 and (i + 1 - 1) != size - x:
                    if (i + 1 - 1) // x % 2 == 1:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, i + 1 - x + 1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x + 1)
                        array1.insert(j + 5, i + 1 + x)
                        array1.insert(j + 6, -1)
                    else:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, -1)
                        array1.insert(j + 2, i + 1 - x)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x - 1 + 1)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, -1)
                elif (i + 1) % x == 0 and i + 1 != x and i + 1 != size:
                    if (i + 1) // x % 2 == 0:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, -1)
                        array1.insert(j + 4, -1)
                        array1.insert(j + 5, i + 1 + x)
                        array1.insert(j + 6, i + 1 - 1)
                    else:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x - 1)
                        array1.insert(j + 2, i + 1 - x)
                        array1.insert(j + 3, -1)
                        array1.insert(j + 4, i + 1 + x)
                        array1.insert(j + 5, i + 1 + x - 1)
                        array1.insert(j + 6, i + 1 - 1)
                elif size - x - 1 < i < size + 1:
                    if i + 1 == size - x + 1:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, i + 1 - x + 1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, -1)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, -1)
                    elif i + 1 == size:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, -1)
                        array1.insert(j + 3, -1)
                        array1.insert(j + 4, -1)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, i + 1 - 1)
                    else:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, i + 1 - x + 1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, -1)
                        array1.insert(j + 5, -1)
                        array1.insert(j + 6, i - 1 + 1)
                else:
                    if i // x % 2 == 1:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x)
                        array1.insert(j + 2, i + 1 - x + 1)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x + 1)
                        array1.insert(j + 5, i + 1 + x + 1 - 1)
                        array1.insert(j + 6, i + 1 - 1)
                    else:
                        array1.insert(j, "Соседи:")
                        array1.insert(j + 1, i + 1 - x - 1)
                        array1.insert(j + 2, i + 1 - x)
                        array1.insert(j + 3, i + 1 + 1)
                        array1.insert(j + 4, i + 1 + x)
                        array1.insert(j + 5, i + 1 + x - 1)
                        array1.insert(j + 6, i + 1 - 1)
                break
                # array1.insert(j, -1)
            elif j == 4:
                array1.insert(j, i + 1)
                # array1.insert(j, (i // x + 1) * 10 + (i + 1) % x)
                # if array1[j] % 10 == 0:
                #     array1[j] = array1[j] + x
            else:
                array1.insert(j, randint(0, 10))
        array.insert(i, array1)
    for a in range(size):
        for b in range(s):
            if b > 4:
                if array[a][b] == -1:
                    array[a][b] = "океан"
    return array


def move(co1):
    cord = co1
    return cord


def array_output(arr, x):
    for i in range(x):
        print("Тайл номер", i + 1, "это", arr[i])


# 0 - Деньги, 1 - пища, 2 - производство, 3 - очки производства, 4 - 9 - номера соседних клеток

x_tiles = 4
y_tiles = 4
size_of_tile = 11
our_cord = 4
civ_map = array_generation(x_tiles, y_tiles, size_of_tile)
array_output(civ_map, y_tiles * x_tiles)
print("Добро пожаловать в программу анализа ходов для цивилизации!")
while 1:
    print("Для дальнейшей работы выберите одну из следующих функций:")
    print("1. Анализ лучшей клетки по собственному параметру")
    print("2. Анализ лучшей клетки по заготовленному шаблону")
    print("3. Пересоздать игровое поле")
    print("4. Повторный вывод имеющейся карты")
    print("5. Вывести текущую координату и значение ячейки")
    print("6. Переместиться на выбранную координату")
    print("7. Переход на лучшую точку рядом")
    print("0. Закончить выполнение")
    flag = int(input("Ваш выбор: "))
    if flag == 1:
        print("Вы выбрали анализ по собственному параметру!")
        print("Какой параметр вы хотите проанализировать?")
        print("*для справки введите '?'")
        while 1:
            tile_num = input("Ваш вариант: ")
            if tile_num == '?':
                print("От 1 до 4 расположились заполненные данные из ячеек, где")
                print("1 - Деньги, 2 - пища, 3 - производство, 4 - очки производства")
                # print("\t4:9 - номера соседних клеток.")
            else:
                tile_num = int(tile_num)
                if tile_num > 4 or tile_num < 0:
                    print("Не корректный ввод, попробуйте снова")
                else:
                    print("Какое действие вы хотите провести с данным значением?")
                    print("1 - Поиск клетки с максимальным значением поля номер", tile_num, ", 2 - с минимальным.")
                    ex_num = int(input("Ваш выбор: "))
                    result1, result2 = check_piles(tile_num - 1, ex_num, civ_map, x_tiles, y_tiles)
                    print("Вам подходит ячейка", result1 + 1, " с наполненим пункта", tile_num, "в", result2)
                    print("Вот сама ячейка:")
                    print(civ_map[result1])
                    break
    elif flag == 2:
        print("Вы выбрали поиск лучшей клетки по мнению ИИ!")
        place, bad_status = super_func(civ_map, x_tiles, y_tiles)
        print("Лучшее место, на наш взгляд, это тайл номер", place + 1)
        if bad_status == 1:
            print("\tНо правда еды там не особо много, всего", civ_map[place][1])
        print(civ_map[place])
    elif flag == 3:
        print("Вы выбрали генерацию нового поля!")
        civ_map = array_generation(x_tiles, y_tiles, size_of_tile)
        array_output(civ_map, y_tiles * x_tiles)
    elif flag == 4:
        print("Вы выбрали повторную демонстрацию имеющихся даных.")
        array_output(civ_map, y_tiles * x_tiles)
    elif flag == 0:
        print("Отлично, продуктивно поработали, стратег! Спасибо за вклад в историю.")
        break
    elif flag == 5:
        print("Вы выбрали информацию о текущей координате!")
        print("Ваша ячейка имеет номер", our_cord, ", и выглядит так: ", civ_map[our_cord - 1])
    elif flag == 6:
        print("Вы выбрали переход на другую клетку!")
        print("Выберите на какой тайл вы хотите переместиться")
        cord = int(input("Координата: "))
        our_cord = move(cord)
        print("Вы успешно достигли точки ", our_cord)
        print(civ_map[our_cord])
    elif flag == 7:
        print("Вы выбрали анализ и перемещение на лучшую клетку рядом!")
        top_place = super_func2(civ_map, our_cord)
        print("Лучшая точка рядом это ячейка номер ", top_place)
        print(civ_map[top_place])
        our_cord = top_place
        print("Вы переместились на точку ", our_cord)
    else:
        print("Не корректный ввод, попробуйте снова")
